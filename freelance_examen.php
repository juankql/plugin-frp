<?php
/*
Plugin Name: Freelance Test App
Plugin URI: https://updraftplus.com
Description: The main goal of this plugin is to be a platform for the freelancers to apply and upload their test results for the updraftplus team review.
Version: 2.0.0.AR
Author : Ing. Juan Carlos Quevedo LussÃ³n
Author URI: https://updraftplus.com   
License: GPLv3 or later 
*/

if(!class_exists( 'WP_Freelance_Test' ) ) {

class WP_Freelance_Test {
	private $upload_dir = "";

	public function __construct() {
		add_action( 'admin_menu', array( $this, 'ft_view_menu' ) );
		add_action( 'admin_init', array( $this,'ft_register_settings'));
		add_action( 'admin_enqueue_scripts', array( $this, 'admin_enqueue_scripts' ), 99999 );
		register_activation_hook( __FILE__, array( $this, 'activate' ) );

		add_action( 'wp_ajax_check_email',  array( $this,'check_email_action_callback' ) );
		add_action( 'wp_ajax_freelance_upload_file',  array( $this,'freelance_upload_file' ) );
		add_action( 'wp_ajax_freelance_register', array( $this,'freelance_register' ) );
		add_action( 'wp_ajax_ft_admin_delete_applicant', array( $this,'ft_admin_delete_applicant' ) );
		add_action( 'wp_ajax_ft_admin_accept_applicant', array( $this,'ft_admin_accept_applicant' ) );
		add_action( 'wp_ajax_ft_admin_denied_applicant', array( $this,'ft_admin_denied_applicant' ) );
		add_action( 'wp_ajax_ft_admin_eval_test', array( $this,'ft_admin_eval_test' ) );
		add_action( 'wp_ajax_ft_admin_insert_question', array( $this,'ft_admin_insert_question' ) );
		add_action( 'wp_ajax_ft_admin_delete_question', array( $this,'ft_admin_delete_question' ) );
		add_action( 'wp_ajax_ft_admin_get_question_by_id', array( $this,'ft_admin_get_question_by_id' ) );

		add_shortcode( 'ft_frontend_interface', array( $this, 'ft_frontend_interface' ) );
	}

	public function ft_admin_delete_applicant() {
		$action = $_REQUEST['action'];
		$id = $_REQUEST['id'];
		check_ajax_referer( 'delete_email'.$id, 'security' );

		global $wpdb;
		$table = $wpdb->prefix."freelance_test_data";
		$file_path_test = $wpdb->get_var($wpdb->prepare("SELECT zip_path FROM $table WHERE ID = %s",$id));
		// Getting if exists all the files freelance has uploaded and deleting it
		$query = "Select * FROM $table WHERE id=%s";

		$result = $wpdb->get_row($wpdb->prepare($query,$id),OBJECT);

		$answers = unserialize($result->answers);

		if( $wpdb->delete( $table, array( 'ID' => $id ), array( '%d' ) ) ){
			if( is_file( $file_path_test ) ) {
				unlink( $file_path_test );
			}

			foreach( $answers as $answer ) {
				if( isset( $answer['file'] ) && is_file( $answer['file'] ) ) {
					unlink( $answer['file'] );
				}
			}
			
			$response['type'] = 'ok';
			$response['message'] = 'The applicant was succesfully deleted from the database.';
			$response['list'] = $this->ft_populate_table_freelancers();
			header('Content-Type: application/json');
			echo json_encode( $response );
			wp_die();	
		} else {
			$response['type'] = 'ok';
			$response['message'] = 'Sorry. The applicant was not deleted from the database.';
			header('Content-Type: application/json');
			echo json_encode( $response );
			wp_die();
		}
	
	}
	
	public function ft_admin_denied_applicant() {
		$action = $_REQUEST['action'];
		$id = $_REQUEST['id'];
		check_ajax_referer( 'deny_applicant'.$id, 'security' );
		
		global $wpdb;
		$table = $wpdb->prefix."freelance_test_data";
		$applicant_data = $wpdb->get_row($wpdb->prepare("SELECT * FROM $table WHERE ID = %s",$id),OBJECT);
		
		if(count($applicant_data) > 0){
			$ft_test_contact_email = get_option('ft_test_contact_email');
			$ft_template_accepting = get_option('ft_test_reject_mail_content');
			$filled_template = str_replace('[freelance_name]',esc_html($applicant_data->name),$ft_template_accepting);
			
	        $to=array($applicant_data->email);
	        $subject='Your freelance application now is accepted';
	        $headers = 'Reply-to: '.$ft_test_contact_email.'<'.$ft_test_contact_email.'>' . "\r\n";
	        
			$message_content="<html>
				<head>
					<meta http-equiv='Content-Type' content='text/html; charset=utf-8' />
					<title>New Freelance Application</title>
					<style type='text/css'>
					<!--
						.style1 {
							font-size: 12px;
							color: #0000FF;
							font-style: italic;
						}
					-->
					</style>
				</head>

				<body>";
			 $message_content.=$filled_template;
			 $message_content.="			
						<hr>
						<p align='center' class='style1'>.:.:.:.:.:.:.:.:.:.: This email is autogenerated by Freelance Test Plugin :.:.:.:.:.:.:.:.:.:.</p>
						<p align='center' class='style1'>Please dont answer this email.</p> 
				</body>
			</html>";
	         
	            
	        add_filter('wp_mail_content_type',create_function('', 'return "text/html";'));
	            
	           
	        if(wp_mail( $to, $subject, $message_content, $headers)){
	        	//Update the status in the database
	        	$wpdb->update($table,array('status' => 3),array('id' => $id));
				$response['type'] = 'ok';
				$response['message'] = 'The applicant was succesfully notified.';
				$response['list'] = $this->ft_populate_table_freelancers();
				header('Content-Type: application/json');
				echo json_encode( $response );
				wp_die();	
			} else {
				$response['type'] = 'ok';
				$response['message'] = 'Sorry. The applicant was not notified. Please try again later';
				$response['list'] = $this->ft_populate_table_freelancers();   
				header('Content-Type: application/json');
				echo json_encode( $response );
				wp_die();
			} 
		} else {
			$response['type'] = 'ok';
			$response['message'] = 'Sorry. The applicant was already notified or dont exists on the database. Please refresh this page.';
			header('Content-Type: application/json');
			echo json_encode( $response );
			wp_die();
		}
	}
	
	public function ft_admin_accept_applicant() {
		$action = $_REQUEST['action'];
		$id = $_REQUEST['id'];
		check_ajax_referer( 'accept_applicant'.$id, 'security' );
		
		global $wpdb;
		$table = $wpdb->prefix."freelance_test_data";
		$applicant_data = $wpdb->get_row($wpdb->prepare("SELECT * FROM $table WHERE ID = %s and status = 1",$id),OBJECT);
		
		if(count($applicant_data)> 0){
			$ft_test_contact_email = get_option('ft_test_contact_email');
			$ft_template_accepting = get_option('ft_test_accept_mail_content');
			$filled_template = str_replace('[freelance_name]',esc_html($applicant_data->name),$ft_template_accepting);
			
	        $to=array($applicant_data->email);
	        $subject='Your freelance application now is accepted';
	        $headers = 'Reply-to: '.$ft_test_contact_email.'<'.$ft_test_contact_email.'>' . "\r\n";
	        
			$message_content="<html>
				<head>
					<meta http-equiv='Content-Type' content='text/html; charset=utf-8' />
					<title>New Freelance Application</title>
					<style type='text/css'>
					<!--
						.style1 {
							font-size: 12px;
							color: #0000FF;
							font-style: italic;
						}
					-->
					</style>
				</head>

				<body>";
			 $message_content.=$filled_template;
			 $message_content.="			
						<hr>
						<p align='center' class='style1'>.:.:.:.:.:.:.:.:.:.: This email is autogenerated by Freelance Test Plugin :.:.:.:.:.:.:.:.:.:.</p>
						<p align='center' class='style1'>Please dont answer this email.</p> 
				</body>
			</html>";
	         
	            
	        add_filter('wp_mail_content_type',create_function('', 'return "text/html";'));
	            
	           
	        if(wp_mail($to, $subject, $message_content, $headers)){
	        	//Update the status in the database
	        	$applicant_data = $wpdb->update($table,array('status' => 2),array('id' => $id));
				$response['type'] = 'ok';
				$response['message'] = 'The applicant was succesfully notified.';
				$response['list'] = $this->ft_populate_table_freelancers();
				header('Content-Type: application/json');
				echo json_encode( $response );
				wp_die();	
			} else {
				$response['type'] = 'ok';
				$response['message'] = 'Sorry. The applicant was not notified. Please try again later';
				$response['list'] = $this->ft_populate_table_freelancers();       
				header('Content-Type: application/json');
				echo json_encode( $response );
				wp_die();
			} 
		} else {
			$response['type'] = 'ok';
			$response['message'] = 'Sorry. The applicant was already notified or dont exists on the database. Please refresh this page.';
			header('Content-Type: application/json');
			echo json_encode( $response );
			wp_die();
		}
	}
	
	public function ft_admin_eval_test(){
		$action = $_REQUEST['action'];
		$id = $_REQUEST['id'];
		$test_eval = $_REQUEST['evaluation'];
		$test_comments = $_REQUEST['evaluation_comments'];   
		check_ajax_referer( 'eval_applicant'.$id, 'security' );
		$current_user = wp_get_current_user();   
		global $wpdb;
		$table = $wpdb->prefix."freelance_test_data";
		$applicant_data = $wpdb->get_row($wpdb->prepare("SELECT * FROM $table WHERE ID = %s and status = 2",$id),OBJECT);
		
		if(count($applicant_data)> 0){
			$wpdb->update($table,array('test_comments' => $test_comments, 'test_eval' =>$test_eval),array('id' => $id));
			$ft_test_contact_email = get_option('ft_test_contact_email');
	        $to=array($ft_test_contact_email);
	        $subject='Freelance test evaluation notify';
	        $headers = 'Reply-to: '.$ft_test_contact_email.'<'.$ft_test_contact_email.'>' . "\r\n";
	        
			$message_content.="<html>
				<head>
					<meta http-equiv='Content-Type' content='text/html; charset=utf-8' />
					<title>New Freelance Evaluation</title>
					<style type='text/css'>
					<!--
						.style1 {
							font-size: 12px;
							color: #0000FF;
							font-style: italic;
						}
					-->
					</style>
				</head>

				<body>
					<div>
						<h1 align='center'>Hi, admin</h1>
						<p>".esc_attr($current_user->user_email)."Had evaluated the test submited from freelance applicant.
						<p><b>Freelance data</b></p>
						<p>Name:".esc_attr($applicant_data->name)." </p> 
						<p>Email:".esc_attr($applicant_data->email)." </p>
						<p><b>Evaluation data</b></p>
						<p>Evaluator email:".esc_attr($current_user->user_email)." </p>
						<p>Evaluation:".esc_attr($test_eval)." </p>
						<p>Evaluation note:".esc_attr($test_comments)." </p>    
						<hr>
						
						<p align='center' class='style1'>.:.:.:.:.:.:.:.:.:.: This email is autogenerated by Freelance Test Plugin :.:.:.:.:.:.:.:.:.:.</p>
						<p align='center' class='style1'>Please dont answer this email.</p> 
					</div>
				</body>
			</html>";
	         
	            
	        add_filter('wp_mail_content_type',create_function('', 'return "text/html";'));
	            
	           
	        if(wp_mail($to, $subject, $message_content, $headers)){
	        	//Update the status in the database
				$response['type'] = 'ok';
				$response['message'] = 'The applicant was succesfully notified.';
				$response['list'] = $this->ft_populate_table_freelancers();
				header('Content-Type: application/json');
				echo json_encode( $response );
				wp_die();	
			} else {
				$response['type'] = 'ok';
				$response['message'] = 'Sorry. The evaluation was not saved. Please try again later';
				$response['list'] = $this->ft_populate_table_freelancers();       
				header('Content-Type: application/json');
				echo json_encode( $response );
				wp_die();
			} 
		} else {
			$response['type'] = 'ok';
			$response['message'] = 'Sorry. The evaluation was already saved on the database. Please refresh this page.';
			header('Content-Type: application/json');
			echo json_encode( $response );
			wp_die();
		}	
	}
	
	public function my_upload_dir($upload) {
		$upload['subdir'] = '/ft_uploaded_files';
		$upload['path']   = $upload['basedir'].$upload['subdir'];
		$upload['url']    = $upload['baseurl'].$upload['subdir'];
		$this->upload_dir = $upload['path']; 

		return $upload;
	}
	
	public function freelance_register(){
		check_ajax_referer( 'register_form_check', 'security' );
		    
		global $wpdb;
		$email = sanitize_email( $_POST['email'] ); 
		$table = $wpdb->prefix."freelance_test_data";
		$wpdb->freelance_test_data = $table; 
		
		$query = "Select count(email) as counter FROM $table WHERE email=%s";
		
		$result = $wpdb->get_var($wpdb->prepare($query,$email)); 
		 
		if($result > 0) {
			$response['type'] = 'error';
			$response['message'] = 'This email is already used for a previous test.';
			$response['value'] = $result;
			header('Content-Type: application/json');
			echo json_encode( $response );
			wp_die();	
		} else {
			$cv_url = '';
			$cv_path = '';
			
            $table_question = $wpdb->prefix."question_test_data"; 
		   	$query = "Select * FROM $table_question";
			$questions = $wpdb->get_results($wpdb->prepare($query));
			
			$answers = array();
			add_filter('upload_dir', array($this,'my_upload_dir')); 
			foreach($questions as $question) {
				if(isset($_FILES['question_'.$question->id]) && $_FILES['question_'.$question->id] !== 'undefined') {
					$uploadedfile = $_FILES['question_'.$question->id];
					$upload_overrides = array( 'test_form' => false );
					
					$movefile = wp_handle_upload( $uploadedfile, $upload_overrides );
					$answers[$question->id] = $movefile;
				} else {
					if(isset ($_POST['question_'.$question->id])){
						$answers[$question->id] = sanitize_text_field($_POST['question_'.$question->id]);  	
					}
				}
			}
			remove_filter('upload_dir', array($this,'my_upload_dir'));  
			
			$answers_to_db = serialize($answers);	
			$name = sanitize_text_field($_POST['name']);
			
			if( $wpdb->insert( $table, array('email' =>$email,'name'=> $name, 'answers' => $answers_to_db ) ) ) {
			//We send the email to the plugin contact email
			$ft_test_contact_email = get_option('ft_test_contact_email');
            $to=array($ft_test_contact_email);
            $subject='New Freelance Application';
            $headers = 'Reply-to: '.$name.'<'.$email.'>' . "\r\n";
            
            
            $message_content.="<html>
                        <head>
                        <meta http-equiv='Content-Type' content='text/html; charset=utf-8' />
                        <title>New Freelance Application</title>
                        <style type='text/css'>
                        <!--
                        .style1 {
                            font-size: 12px;
                            color: #0000FF;
                            font-style: italic;
                        }
                        -->
                        </style>
                        </head>

                        <body>
                        <div>
                        <h1 align='center'>New Freelance Application</h1>
                        <p><b>Name</b>: ".esc_html($name)."</p>
                        <p><b>Email</b>: ".esc_attr($email)."</p>
                        <p><b>Date of Application:</b> ".date("Y-m-d H:i:s")."</p>";
						if(is_array($answers)){ 
							foreach ($answers as $id => $answer){
								$table_question = $wpdb->prefix."question_test_data"; 
								$query = "Select * FROM $table_question WHERE id=%s";
								$question_base = $wpdb->get_row($wpdb->prepare($query,$id),OBJECT);
								$answer_to_text = '';
								if($question_base->type == 'file') {
									$answer_to_text = '<p><a title="Download the file" href="'.$answer['url'].'">File</a></p>';	
								} else {
									$answer_to_text = '<p>'.esc_attr($answer).'</p>';	
								}
								$formated_user_answers.= '<p><b>'.esc_attr($question_base->question_text).':</b></p>'.$answer_to_text;
							}
						}
            $message_content.=$formated_user_answers."<hr>
                        <p align='center' class='style1'>.:.:.:.:.:.:.:.:.:.: This email is autogenerated by Freelance Test Plugin :.:.:.:.:.:.:.:.:.:.</p>
                        <p align='center' class='style1'>You can contact to the applicant replying this email.</p> 
                        </div>
                        </body>
                        </html>";
         
            
            add_filter('wp_mail_content_type',create_function('', 'return "text/html";'));
            
           
            if(wp_mail( $to, $subject, $message_content, $headers)){
                $response['type'] = 'ok';
				$response['message'] = 'Thanks for your application. Our team will review your profile and we will contact you soon.';
				header('Content-Type: application/json');
				echo json_encode( $response );
				wp_die();	
            } else {
                $response['type'] = 'error';
				$response['message'] = 'Sorry. The mail was not sent';
				header('Content-Type: application/json');
				echo json_encode( $response );
				wp_die();	 
            }
            
            remove_filter( 'wp_mail_content_type', 'wpdocs_set_html_mail_content_type' );
         }
            
        
		}  
	}
	
	public function freelance_upload_file(){
		check_ajax_referer( 'file_upload_check', 'security' );
		global $wpdb; 
		$email = sanitize_email( $_POST['email_user'] );
		$table = $wpdb->prefix."freelance_test_data";
		$wpdb->freelance_test_data = $table;
		$query = "Select * FROM $table WHERE email=%s";
		
		$result = $wpdb->get_row($wpdb->prepare($query,$email),OBJECT);
		
		if($result->zip_url == ''){
			$uploadedfile = $_FILES['async-upload'];

			$upload_overrides = array( 'test_form' => false );
			//checking for file type only zip or .rar or .tar  . Dropped off the MIME type checks
			//Also check the file extension, because the client may have forged the MIME type
			if(preg_match('/\.(zip|rar|tar(\.(gz|bz2)))$/i',$uploadedfile['name'])){
				add_filter('upload_dir', array($this,'my_upload_dir'));
				$movefile = wp_handle_upload( $uploadedfile, $upload_overrides );
				remove_filter('upload_dir', array($this,'my_upload_dir'));

				if ( $movefile && !isset( $movefile['error'] ) ) {
					$zip_url = $movefile['url'];
					$zip_path = $movefile['file'];
					$wpdb->query($wpdb->prepare("Update $table SET zip_url = %s, zip_path= %s, time_end = Now() WHERE email = %s",$zip_url,$zip_path,$email));

					$query = "Select * FROM $table WHERE email=%s";
					$result2 = $wpdb->get_row($wpdb->prepare($query,$email),OBJECT);
					$wpdb->update($table,array('status' => 4),array('id' => $result2->id));  
					$response['end_time'] = $result2->time_end;
					$response['type'] = 'ok';
					$response['message'] = 'Thanks for your time. Our team will review your code and we will contact you soon.';
					header('Content-Type: application/json');
					echo json_encode( $response );
					wp_die();
				} else {
					/**
						* Error generated by _wp_handle_upload()
						* @see _wp_handle_upload() in wp-admin/includes/file.php
						*/
					$response['type'] = 'error';
					$response['message'] = $movefile['error'];
					header('Content-Type: application/json');
					echo json_encode( $response );
					wp_die();
				}
			} else {
				$response['type'] = 'error';
				$response['message'] = "File type not allowed";
				header('Content-Type: application/json');
				echo json_encode( $response );
				wp_die();
			}
		} else {
			$response['type'] = 'error';
			$response['message'] = "You already had done the test";
			header('Content-Type: application/json');
			echo json_encode( $response );
			wp_die();
		}
		wp_die();
	}
	
	public function check_email_action_callback(){
		check_ajax_referer( 'email_check', 'security' );
		global $wpdb;
		$email = sanitize_email( $_POST['email'] );
		$table = $wpdb->prefix."freelance_test_data";
		$wpdb->freelance_test_data = $table;
		$query = "Select * FROM $table WHERE email=%s AND status=2";
		
		$result = $wpdb->get_row($wpdb->prepare($query,$email),OBJECT);
			
		
		if(count($result) > 0){
			$response['message'] = 'accepted';
			$response['test_instructions'] = get_option('ft_test_file_url');
			//set at the database the time the freelancer start the test
			if($result->time_begin == '0000-00-00 00:00:00'){
				$wpdb->query($wpdb->prepare("Update $table SET time_begin = Now() WHERE email = %s",$email));
			}
			
			$query = "Select * FROM $table WHERE email=%s"; 
			$result2 = $wpdb->get_row($wpdb->prepare($query,$email),OBJECT);
			
			$response['start_time'] = $result2->time_begin; 
			
			header('Content-Type: application/json');
			echo json_encode( $response );
			die();
		} else {
			$response['message'] = 'not authorized';
			header('Content-Type: application/json');
			echo json_encode( $response );
			die();
		}	
	}
	
	public static function activate(){
		global $wpdb;
		$table_freelance = $wpdb->prefix."freelance_test_data";
		$table_questions = $wpdb->prefix."question_test_data";    
		$collate = '';

		if ($wpdb->has_cap('collation')) {
			if (!empty($wpdb->charset)) {
				$collate .= "DEFAULT CHARACTER SET $wpdb->charset";
			}
			if (!empty($wpdb->collate)) {
				$collate .= " COLLATE $wpdb->collate";
			}
		}

		require_once ABSPATH.'wp-admin/includes/upgrade.php';

		// Important: obey the magical/arbitrary rules for formatting this stuff: https://codex.wordpress.org/Creating_Tables_with_Plugins
		
		
		$structure_freelance_table = "CREATE TABLE $table_freelance (
			id int(9) NOT NULL auto_increment, 
			name varchar (100) NOT NULL default '',
			email varchar(80) NOT NULL,
			answers text NOT NULL default '',
			time_begin datetime NOT NULL default '0000-00-00 00:00:00',
			time_end datetime NOT NULL default '0000-00-00 00:00:00',
			zip_url varchar(255) default '',
			zip_path varchar(255) default '',
			status int default 1,
			test_eval int default -1,
			test_comments varchar (255),
			application_date datetime NOT NULL default Now(),
		PRIMARY KEY  (id),
		UNIQUE KEY email (email)
		) $collate;";
		
		dbDelta($structure_freelance_table);
		
		$structure_questions_table = "CREATE TABLE $table_questions (
			id int(9) NOT NULL auto_increment, 
			question_text text NOT NULL default '',
			required varchar(3) default 'No',
			type varchar(10) default 'text',
			options text default '',
			range_min int default 0,
			range_max int default 0,
		PRIMARY KEY  (id)
		) $collate;";
		
		dbDelta($structure_questions_table);     
		
	}
		
	public static function deactivate() {
		global $wpdb;
		$table = $wpdb->prefix."freelance_test_data";
		$structure = "DROP TABLE IF EXISTS $table;";
		
		$wpdb->query($wpdb->prepare($structure,array()));
	} 
	
	public function ft_frontend_interface(){
	
		if (!is_user_logged_in()) {
			return 'You need to be logged in to see this content.';
		}
	
		add_action('ft_admin_footer', array($this,'ft_enqueue_styles'));
		add_action('ft_admin_footer', array($this,'ft_enqueue_scripts'));
		
		//Get the current user data and if doesnt exists on database then show the form for register application
		//if exists then show the form for taking test
      	$current_user = wp_get_current_user(); 
      	if($this->ft_is_applicant($current_user->user_email)) {
			include('views/frontend_view_test.php');
		} else {
			global $wpdb; 
			$table = $wpdb->prefix."question_test_data";
			$questions = $wpdb->get_results("SELECT * FROM $table");
			include('views/frontend_view_register.php');
		}
		do_action('ft_admin_footer');  
	}

	private function ft_is_applicant($email) {
		global $wpdb;
		$email = sanitize_email($email);
		$table = $wpdb->prefix."freelance_test_data";
		$wpdb->freelance_test_data = $table;
		$query = "Select * FROM $table WHERE email=%s";
		
		$result = $wpdb->get_row($wpdb->prepare($query,$email),OBJECT);
		
		return (count($result) > 0);	
	}
	
	public function ft_enqueue_styles() {
		wp_enqueue_style('ft_styles', plugins_url('/',__FILE__).'ft_style.css');
		wp_enqueue_style('jquery-ui-datepicker-style' ,  plugins_url('/',__FILE__).'css/jquery-ui.min.css');
		wp_enqueue_style('bootstrap4css', plugins_url('/',__FILE__).'bootstrap-4.0.0-alpha.5-dist/css/bootstrap.min.css', array(), '4.0.0-alpha5');  
		wp_enqueue_style('font-awesome', plugins_url('/',__FILE__).'css/font-awesome.min.css');  
		
	}

	public function ft_enqueue_scripts() {
		wp_enqueue_script('jquery-ui-datepicker');
		
		wp_enqueue_script('bootstrap4js', plugins_url('/',__FILE__).'bootstrap-4.0.0-alpha.5-dist/js/bootstrap.min.js', array('jquery'), '4.0.0-alpha5'); 
		wp_enqueue_script('validate', plugins_url('/',__FILE__).'jquery.validate.min.js', array('jquery'), '4.0.0-alpha5');
		wp_enqueue_script('ft_scripts', plugins_url('/',__FILE__).'freelance_examen.js', array('jquery', 'jquery-ui-datepicker', 'bootstrap4js','validate'));
		
		$data = array(
			'upload_url' => admin_url('async-upload.php'),
			'ajax_url'   => admin_url('admin-ajax.php'),
			'nonce_email'      => wp_create_nonce('email_check'),
			'nonce_file_upload'  =>   wp_create_nonce('file_upload_check'),
			'nonce_register' => wp_create_nonce('register_form_check')
		);

		wp_localize_script( 'ft_scripts', 'ajax_object', $data );
	}

	public function admin_enqueue_scripts() {
		wp_enqueue_script('ft-admin', plugins_url('/',__FILE__).'ft_admin.js', array('jquery')); 
		$data = array(
			'ajax_url'   => admin_url('admin-ajax.php'),
		);

		wp_localize_script( 'ft-admin', 'ajax_object', $data ); 
		wp_enqueue_style('jquery-ui-datepicker-style' ,  plugins_url('/',__FILE__).'css/jquery-ui.min.css');     
	}
	
	public function ft_admin_view_settings(){
		// Checking if the user has priviledges for managing options else show a warning.
		if ( !current_user_can( 'manage_options' ) ) {
			wp_die( __( 'You do not have sufficient permissions to access this page.' ) );
		}
		include('views/admin_view_settings.php');
		
	}
	
	private function ft_populate_table_freelancers() {
		add_thickbox(); 
		global $wpdb; 
		$table = $wpdb->prefix."freelance_test_data";
		$results = $wpdb->get_results("SELECT * FROM $table");   
		$lap =0;
		$final_table = "";
		foreach($results as $result){
			$lap++;
			$datetime1 = new DateTime($result->time_begin);
			
			$datetime2 = new DateTime($result->time_end);

			if($datetime2->format('U') > $datetime1->format('U')) {
				$interval = $datetime2->diff($datetime1);
				$date_diff = $interval->format('%Hh:%Im');
			} else {
				$date_diff = "";
			}

			
			//Preparing user answer to form
			$formated_user_answers='<p><b>Name:</b> '.esc_attr($result->name).'</p>';
			$formated_user_answers.='<p><b>Email:</b> '.esc_attr($result->email).'</p>';
			$formated_user_answers.='<div id="thickbox'.$result->id.'" style="display:none;">';
			$formated_user_answers.='<p><b>Name:</b> '.esc_attr($result->name).'</p>';
			$formated_user_answers.='<p><b>Email:</b> '.esc_attr($result->email).'</p>';
			$formated_user_answers.= '<p><b>Date of Application:</b> '.esc_attr($result->application_date).'</p>';
			$answers = unserialize($result->answers);
			if(is_array($answers)){ 
				foreach ($answers as $id => $answer){
					$table_question = $wpdb->prefix."question_test_data"; 
					$query = "Select * FROM $table_question WHERE id=%s";
					$question_base = $wpdb->get_row($wpdb->prepare($query,$id),OBJECT);
					$answer_to_text = '';
					if($question_base->type == 'file') {
						$answer_to_text = '<p><a title="Download the file" target="_blank" href="'.$answer['url'].'">File</a></p>';	
					} else {
						$answer_to_text = '<p>'.esc_attr($answer).'</p>';	
					}
					$formated_user_answers.= '<p><b>'.esc_attr($question_base->question_text).':</b></p>'.$answer_to_text;
				}
			}
			$formated_user_answers.='</div>';
			
			$formated_user_answers.='<p><a href="#TB_inline?width=600&height=500&inlineId=thickbox'.$result->id.'" class="thickbox">Show the full freelance data</a></p>';    
			
			//preparing buttons to accept or reject user
			if($result->status == 1) { 
				$formated_buttons = '<button type="button" class="button-primary accept_user" data-delete_nonce="'.wp_create_nonce('accept_applicant'.esc_attr($result->id)).'" data-applicant_id = "'.esc_attr($result->id).'">Accept</button><br/><br/>';
				$formated_buttons .= '<button type="button" class="button-primary reject_user" data-delete_nonce="'.wp_create_nonce('deny_applicant'.esc_attr($result->id)).'" data-applicant_id = "'.esc_attr($result->id).'" >Reject</button><br/><br/>';
			} else {
				$formated_buttons ="";
			}
			
			//preparing input for test evaluation
			if($result->test_eval == "-1" && $result->zip_url != '') {
				$evaluation_form = '<p>Test evaluation</p><input class="eval_input" type="text" maxlength="2" style="width:100% !important;"><br/><br/>';
				$evaluation_form .='<p>Test comments</p><textarea class="eval_comments" id="eval_comments" rows="7" cols="1" class="form_component" style="width:100% !important;"></textarea><br/><br/>';
				$evaluation_form .='<button type="button" class="button-primary eval_test" data-delete_nonce="'.wp_create_nonce('eval_applicant'.esc_attr($result->id)).'" data-applicant_id = "'.esc_attr($result->id).'">Eval test</button>';
			} else {
				if($result->zip_url != '') {
					$evaluation_form = '<p>Test evaluation: </p>'.$result->test_eval.'/10<br/>';
					$evaluation_form .='<p>Test comments: </p>'.$result->test_comments;
				} else {
					$evaluation_form = '';	
				}
			}
			//Showing up the data in the table
			$final_table.= '<tr>';
			$final_table.= '<th scope="col" class="manage-column column-primary" style="width:5% !important;">'.$result->id.'</th>';
			$final_table.= '<th scope="col" class="manage-column column-primary" style="width:40% !important;">'.$formated_user_answers.'</th>';
			$final_table.= '<th scope="col" class="manage-column">'.esc_attr($result->time_begin).'</th>';
			$final_table.= '<th scope="col" class="manage-column">'.$date_diff.'</th>';
			$link = ($result->zip_url != "") ? '<a title="Download the file" href="'.esc_attr($result->zip_url).'">File</a>' : '';
			$final_table.= '<th scope="col" class="manage-column">'.$link.'</th>'; 
			$final_table.= '<th scope="col" class="manage-column" style="width:20% !important;">'.$evaluation_form.'</th>'; 
			$final_table.= '<th scope="col" class="manage-column">'.$formated_buttons.'<button type="button" class="button-primary ft_delete_applicant" data-delete_nonce="'.wp_create_nonce('delete_email'.esc_attr($result->id)).'" data-applicant_id = "'.esc_attr($result->id).'" title="Delete the user from database">Delete</button></th>';
			$final_table.= '</tr>';
		}
		
		return $final_table; 	
	} 
	
	private function ft_populate_table_questions() {
		global $wpdb; 
		$table = $wpdb->prefix."question_test_data";
		$results = $wpdb->get_results("SELECT * FROM $table");   
		$lap =0;
		$final_table = "";
		foreach($results as $result){
		   	//Preparing questions
			//preparing buttons to modify or delete question 
			$formated_buttons = '<button type="button" class="button-primary edit_question" data-edit_question_nonce="'.wp_create_nonce('edit_question'.esc_attr($result->id)).'" data-question_id = "'.esc_attr($result->id).'">Modify</button><br/><br/>';
			$formated_buttons .= '<button type="button" class="button-primary delete_question" data-delete_question_nonce="'.wp_create_nonce('delete_question'.esc_attr($result->id)).'" data-question_id = "'.esc_attr($result->id).'" >Delete</button><br/><br/>';
		
			
			
			//Showing up the data in the table
			$final_table.= '<tr>';
			$final_table.= '<th scope="col" class="manage-column column-primary" style="width:5% !important;">'.esc_attr($result->id).'</th>';
			$final_table.= '<th scope="col" class="manage-column" style="width:40% !important;">'.esc_attr($result->question_text).'</th>';
			$final_table.= '<th scope="col" class="manage-column">'.esc_attr($result->required).'</th>';
			$final_table.= '<th scope="col" class="manage-column">'.esc_attr($result->type).'</th>';
			$final_table.= '<th scope="col" class="manage-column">'.esc_attr($result->range_min).'</th>'; 
			$final_table.= '<th scope="col" class="manage-column">'.esc_attr($result->range_max).'</th>';
			$options_to_text ="";
			if($result->options !="") {
				$options_to_array = unserialize($result->options);  
				foreach($options_to_array as $option){
					$options_to_text.="<p> - ".$option."</p>";	
				}
			}
			$final_table.= '<th scope="col" class="manage-column">'.$options_to_text.'</th>'; 
			$final_table.= '<th scope="col" class="manage-column">'.$formated_buttons.'</th>';
			$final_table.= '</tr>';
		}
		
		return $final_table; 	
	} 
	
	private function input_for_question($question) {
		 $required = ($question->required == 'yes') ? 'required':'';
		 if($question->type == 'text'){
		 	echo '<input type="text" '.$required.' class="form_component" name="question_'.$question->id.'" id="question_'.$question->id.'">';
		 }
		 if($question->type == 'longtext'){
		 	wp_editor('','question_'.$question->id,array( 'editor_height' => '150px;' ));
		 }
		 if($question->type == 'number'){
		 	 $range = '';
		 	 if( $question->range_min !=0 || $question->range_max !=0 ){
		   		$range = 'data-rule-range="'.$question->range_min.','.$question->range_max.'"';
		 	}
		 	
		 	echo '<input type="number" '.$required.' class="form_component" name="question_'.$question->id.'" id="question_'.$question->id.'" '.$range.'>';
		 }
		 if($question->type == 'file'){
		 	echo '<input type="file" '.$required.' class="form_component" name="question_'.$question->id.'" id="question_'.$question->id.'">';
		 }
		 if($question->type == 'email'){
		 	echo '<input type="email" '.$required.' class="form_component" name="question_'.$question->id.'" id="question_'.$question->id.'">';
		 }
		 if($question->type == 'url'){
		 	echo '<input type="url" '.$required.' class="form_component" name="question_'.$question->id.'" id="question_'.$question->id.'">';
		 }
		 if($question->type == 'radiobutton'){
		 	$options = unserialize($question->options);
		 	foreach($options  as $option) {
		 		echo '<input type="radio" name="question_'.$question->id.'" id="question_'.$question->id.'" value="'.$option.'" > '.$option.'<br>';
		 	}
		 }
		 if($question->type == 'checkbox'){
		 	$options = unserialize($question->options); 
		 	foreach($options  as $option) {
		 		echo '<input type="checkbox" name="question_'.$question->id.'" id="question_'.$question->id.'" value="'.$option.'" > '.$option.'<br>';
		 	}
		 }
	}
		
	public function ft_admin_page(){
		if ( !current_user_can( 'manage_options' ) )  {
			wp_die( __( 'You do not have sufficient permissions to access this page.' ) );
		}
		// Echoing the tabs with the menu
		$questions_Screen = ( isset( $_GET['action'] ) && 'test_elaboration' == $_GET['action'] ) ? true : false;
        $config_Screen = ( isset( $_GET['action'] ) && 'config' == $_GET['action'] ) ? true : false;
        
		echo '<div class="wrap">';
        echo '<h1>Freelance Test Plugin Dashboard</h1>';
		echo '<h2 class="nav-tab-wrapper">';
		echo '<a href="'.esc_url( add_query_arg( array( 'action' => 'list_Screen' ) ,admin_url( 'admin.php?page=ft_menu' ))).'" class="nav-tab ';
		if ( ! isset( $_GET['action'] ) || (!$questions_Screen && !$config_Screen ) || ('list_Screen' == $_GET['action'])){
			echo ' nav-tab-active';
		}
		
		echo '"><span class="dashicons dashicons-id-alt"></span> Applicants list</a>';
		echo '<a href="'.esc_url( add_query_arg( array( 'action' => 'test_elaboration' ), admin_url( 'admin.php?page=ft_menu' ) ) ).'" class="nav-tab';
		if ( $questions_Screen ){
			echo ' nav-tab-active'; 
		}
		
		echo '"><span class="dashicons dashicons-analytics"></span> Questions manager</a><a href="'.esc_url( add_query_arg( array( 'action' => 'config' ), admin_url( 'admin.php?page=ft_menu' ) ) ).'" class="nav-tab';
		if ( $config_Screen ){
			echo ' nav-tab-active';
		}
		
		echo '"><span class="dashicons dashicons-admin-settings"></span> Plugin configuration</a>';       
		echo '</h2>';
		echo '</div>';
		
		if($config_Screen){
			$this->ft_admin_view_settings();
		} elseif ($questions_Screen){
			include('views/managing_questions.php');   	
		} else {
			// Echoing the table with the applicants 
		   include('views/applicants_view.php');   	
		}
		
	}

	public function ft_view_menu() {
			add_options_page( 'Freelance Test Plugin Configuration', 'Freelance Test', 'manage_options', 'freelance_test-settings', array($this,'ft_admin_view_settings'));
			add_menu_page( 'Freelance Test Plugin', 'Freelance Test', 'manage_options', 'ft_menu', array($this, 'ft_admin_page'), 'dashicons-id-alt');
	}
	
	public function ft_admin_insert_question(){
		check_ajax_referer( 'insert_question', 'security' ); 
		global $wpdb;
		$table = $wpdb->prefix."question_test_data";
		$wpdb->question_test_data = $table; 
		
		$id = intval( $_POST['question_id'] );
		$question_text = sanitize_text_field($_POST['ft_insert_question_content']);
		$range_min_value = intval($_POST['ft_range_min']);
		$range_max_value = intval($_POST['ft_range_max']);
		$question_required = isset( $_POST['ft_required'] ) ? sanitize_text_field($_POST['ft_required']) : "no";
		$question_type = sanitize_text_field($_POST['ft_question_type']); 
		$options = array(); 
		$optionsdb = "";
		if(!empty($_POST["ft_options"]) && is_array($_POST["ft_options"]) && ($question_type == 'checkbox' || $question_type == 'radiobutton' )){
			foreach ( $_POST["ft_options"] as $option ) {
				$options[$option] = $option;	
			}	
			$optionsdb=serialize($options);
		}
		
		$query = "Select count(id) as counter FROM $table WHERE id=%s";
		
		$result = $wpdb->get_var($wpdb->prepare($query,$id)); 
		
		//if exists the question just update it with the new data 
		if($result > 0) {
			if($wpdb->update($table,array('question_text'=> $question_text,'required'=>$question_required,'type'=>$question_type,'options'=> $optionsdb,'range_min'=>$range_min_value,'range_max'=>$range_max_value),array('id'=>$id))){
				$response['type'] = 'ok';
				$response['message'] = 'The question was updated correctly.';
			} else {
				$response['type'] = 'error';
				$response['message'] = 'The question was not updated correctly. Please try again.';
			}
			$response['list'] = $this->ft_populate_table_questions();   
			header('Content-Type: application/json');
			echo json_encode( $response );
			wp_die();	
		} else {
			// if doesnt exsts then insert
			if($wpdb->insert( $table, array('question_text'=> $question_text,'required'=>$question_required,'type'=>$question_type,'options'=>$optionsdb,'range_min'=>$range_min_value,'range_max'=>$range_max_value))) {
				$response['type'] = 'ok';
				$response['message'] = 'The question was inserted correctly.';
			} else {
				$response['type'] = 'error';
				$response['message'] = 'The question was not inserted correctly. Please try again.';
			}
			$response['list'] = $this->ft_populate_table_questions();
			header('Content-Type: application/json');
			echo json_encode( $response );
			wp_die();
		}
	
	}
	
	public function ft_admin_delete_question() {
		$action = $_REQUEST['action'];
		$id = $_REQUEST['id'];
		check_ajax_referer( 'delete_question'.$id, 'security' );   
		
		//
		global $wpdb;
		$table = $wpdb->prefix."question_test_data";   			
		if($wpdb->delete( $table, array( 'ID' => $id ), array( '%d' ) )){
			
			$response['type'] = 'ok';
			$response['message'] = 'The question was succesfully deleted from the database.';
			$response['list'] = $this->ft_populate_table_questions();
			header('Content-Type: application/json');
			echo json_encode( $response );
			wp_die();	
		} else {
			$response['type'] = 'ok';
			$response['message'] = 'Sorry. The question was not deleted from the database.';
			header('Content-Type: application/json');
			echo json_encode( $response );
			wp_die();
		}
		
	}
	
	public function ft_admin_get_question_by_id() {
		$id = $_REQUEST['id'];  
		global $wpdb;
		$table = $wpdb->prefix."question_test_data";
		$wpdb->question_test_data = $table;
		$query = "Select * FROM $table WHERE id=%s";
		
		$result = $wpdb->get_row($wpdb->prepare($query,$id),OBJECT);
		$result->options = unserialize($result->options);
		$result->options = implode('|',$result->options);
		$response['type'] = 'ok';
		$response['question'] = $result;
		header('Content-Type: application/json');
		echo json_encode( $response );
		wp_die();	
		 
	}

	public function ft_register_settings() {
		register_setting( 'freelance_test-settings', 'ft_test_file_url' );
		register_setting( 'freelance_test-settings', 'ft_test_contact_email');
		register_setting( 'freelance_test-settings', 'ft_test_reject_mail_content'); 
		register_setting( 'freelance_test-settings', 'ft_test_accept_mail_content');
	}

}

new WP_Freelance_Test();
}

